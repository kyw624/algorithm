/*
1. 셀수있는 수량의 순서있는 열거 또는 어떤 순서를 따르는 요소들의 모음을 튜플이라한다.
2. n개의 요소를 가진 튜플을 n-튜플 (n-tuple)이라고 하며, 다음과 같이 표현 할 수 있다.
  - (a1, a2, a3, ..., an)
3. 튜플의 성질
  1) 중복된 원소가 있을 수 있다.
  2) 원소에 정해진 순서가 있고, 원소의 순서가 다르다면 서로 다른 튜플이다.
  3) 튜플의 원소 개수는 유한하다.
4. 원소의 개수가 n개이고, 중복되는 원소가 없는 튜플 (a1, a2, a3, ..., an)이 주어질 때
   다음과 같이 집합 기호를 이용해 표현이 가능하다.
  - {{a1}, {a1, a2}, {a1, a2, a3}, {a1, a2, a3, a4}, ... {a1, a2, a3, a4, ..., an}}
5. 튜플 (2, 1, 3, 4) 를 집합기호로 표현 (아래는 모두 같은 튜플이다.)
  - {{2}, {2, 1}, {2, 1, 3}, {2, 1, 3, 4}}
  - {{2, 1, 3, 4}, {2}, {2, 1, 3}, {2, 1}}
  - {{1, 2, 3}, {2, 1}, {1, 2, 4, 3}, {2}}
6. 특정 튜플의 집합이 담긴 문자열 s로 해당하는 튜플을 구하는 문제.

[조건]
  - s의 길이는 5 이상, 1,000,000 이하이다.
  - s는 숫자와 '{'  '}'  ',' 로만 이루어져 있다.
  - 숫자가 0으로 시작하는 경우는 없다.
  - s는 항상 중복되는 원소가 없는 튜플을 표현한다.
  - s가 표현하는 튜플의 원소는 1 이상 100,000 이하인 자연수이다.
  - return 하는 배열의 길이가 1 이상 500 이하인 경우만 입력으로 주어진다.
*/

function solution(s) {
  const setToArray = s
    .split("},{")
    .map((str) => {
      return str
        .match(/[0-9+\,]+/)[0]
        .split(",")
        .map((val) => parseInt(val));
    })
    .sort((a, b) => a.length - b.length);

  const answer = [];

  setToArray.forEach((element) => {
    for (let i = 0; i < element.length; i++) {
      if (answer.indexOf(element[i]) === -1) {
        answer.push(element[i]);
        break;
      }
    }
  });

  return answer;
}

console.log(solution("{{2},{2,1},{2,1,3},{2,1,3,4}}")); // [2, 1, 3, 4]
console.log(solution("{{1,2,3},{2,1},{1,2,4,3},{2}}")); // [2, 1, 3, 4]
console.log(solution("{{20,111},{111}}")); // [111, 20]
console.log(solution("{{123}}")); // [123]
console.log(solution("{{4,2,3},{3},{2,3,4,1},{2,3}}")); // [3, 2, 4, 1]
